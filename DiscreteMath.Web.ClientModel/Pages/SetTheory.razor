@page "/settheory"

@using DiscreteMath.Core.Structs
@using DiscreteMath.Core.Pipeline
@using DiscreteMath.Web.Models
@using DiscreteMath.Core.Language

<h1>Expression Simplification</h1>

<br />
<br />

<EditForm Model="@inputModel" OnValidSubmit="async () => await HandleValidSubmit()">
    <DataAnnotationsValidator />

    <div class="input-group mb-3">
        <InputText @bind-Value="inputModel.Value"
                   type="text"
                   class="form-control col-6"
                   placeholder="Expression"
                   id="evaluation-input"/>
        <button class="btn btn-primary border-left border" type="submit">Simplify</button>
    </div>

    <ValidationSummary />
</EditForm>

<br />
<div class="btn-toolbar" role="toolbar" aria-label="Toolbar with button groups">
    <div class="btn-group mr-5" role="group" aria-label="First row">
        <button type="button" class="btn btn-primary" @onclick="@(() => AddSymbol("A"))">A</button>
        <button type="button" class="btn btn-primary" @onclick="@(() => AddSymbol("B"))">B</button>
        <button type="button" class="btn btn-primary" @onclick="@(() => AddSymbol("C"))">C</button>
        <button type="button" class="btn btn-primary" @onclick="@(() => AddSymbol("D"))">D</button>
        <button type="button" class="btn btn-primary" @onclick="@(() => AddSymbol("E"))">E</button>
        <button type="button" class="btn btn-primary" @onclick="@(() => AddSymbol("Ω"))">Ω</button>
        <button type="button" class="btn btn-primary" @onclick="@(() => AddSymbol("∅"))">∅</button>
    </div>
    <div class="btn-group mr-5">
        <button type="button" class="btn btn-primary" @onclick="@(() => RemoveSymbol())">Erase</button>
    </div>
</div>
<div class="btn-toolbar" role="toolbar" aria-label="Toolbar with button groups">
    <div class="btn-group mr-5" role="group" aria-label="Second row">
        <button type="button" class="btn btn-primary" @onclick="@(() => AddSymbol("⋂"))">⋂</button>
        <button type="button" class="btn btn-primary" @onclick="@(() => AddSymbol("⋃"))">⋃</button>
        <button type="button" class="btn btn-primary" @onclick="@(() => AddSymbol("'"))">'</button>
        <button type="button" class="btn btn-primary" @onclick="@(() => AddSymbol("\\"))">\</button>
        <button type="button" class="btn btn-primary" @onclick="@(() => AddSymbol("△"))">△</button>
        <button type="button" class="btn btn-primary" @onclick="@(() => AddSymbol("("))">(</button>
        <button type="button" class="btn btn-primary" @onclick="@(() => AddSymbol(")"))">)</button>
    </div>
    <div class="btn-group mr-5">
        <button type="button" class="btn btn-primary" @onclick="@(() => ClearInput())">Clear</button>
    </div>
</div>
<br />

<div hidden=@hideResults>
    @if (result.HasValue)
    {
        <h3>Result</h3>
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">Expression</th>
                    <th scope="col">Simplification Rule</th>
                    <th scope="col">Substitutions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var simplification in result.Value)
                {
                    <tr>
                        <td scope="col" class="dark-text">@simplification.RuleDescription</td>
                        <td scope="col">@simplification.SimplifiedExpression</td>
                        <td scope="col" class="dark-text">@simplification.AppliedRule</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border text-secondary" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
    }
</div>

@code {
    bool hideResults = true;
    SetSimplificationModel inputModel = new SetSimplificationModel();
    MyResult<List<SimplificationDescription>> result = MyResult<List<SimplificationDescription>>.Empty();

    async Task HandleValidSubmit()
    {
        hideResults = false;
        result = MyResult<List<SimplificationDescription>>.Empty();
        this.StateHasChanged();
        await Task.Delay(42);
        result = await Task.Run(() => Processor.Process(inputModel.Value, new DefaultSettings()));
    }

    void AddSymbol(string input)
    {
        inputModel.Value ??= string.Empty;
        inputModel.Value += input + " ";
    }

    void RemoveSymbol()
    {
        inputModel.Value = inputModel.Value.Trim();
        inputModel.Value = inputModel.Value.Remove(inputModel.Value.Length - 1);
    }

    void ClearInput()
    {
        inputModel.Value = string.Empty;
    }
}